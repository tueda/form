#ifndef `TEST'
  #message Use -D TEST=XXX
  #terminate
#else
  #include `NAME_' # `TEST'
#endif
.end

*--#[ qgraf_include :
#-

#define QgrafStyleFile "qgraf.sty"
#define QgrafModelFile "qgraf.mdl"
#define QgrafInputFile "qgraf.dat"
#define QgrafOutputFile "qgraf.out"

#define MaxLegs "9"
#define MaxPropagators "19"

#define CurrentModel ""
#define Bosons ""

*--#[ RunQgraf :

**
* Runs QGRAF and reads its output.
*
* Example
* -------
* #call RunQgraf(in=qua,out=qua,glu,loops=1,options=onshell,floop)
*
#procedure RunQgraf(?a)
  #remove <`QgrafOutputFile'>

  #define filename "`QgrafInputFile'"
  #create <`filename'>
  #write <`filename'> "output = \'`QgrafOutputFile'\';"
  #write <`filename'> "style = \'`QgrafStyleFile'\';"
  #write <`filename'> "model = \'`QgrafModelFile'\';"

  #define a "`?a'"
  #define in ""
  #define out ""
  #define loops ""
  #define loopmomentum ""
  #define options ""
  #define next "options"

  #do a = {`?a',}
    #ifdef `a'
      #if "`keepleft_(`a',3)'" == "in="
        #redefine next "in"
        #redefine a "`takeleft_(`a',3)'"
      #elseif "`keepleft_(`a',4)'" == "out="
        #redefine next "out"
        #redefine a "`takeleft_(`a',4)'"
      #elseif "`keepleft_(`a',6)'" == "loops="
        #redefine next "loops"
        #redefine a "`takeleft_(`a',6)'"
      #elseif "`keepleft_(`a',14)'" == "loop_momentum="
        #redefine next "loopmomentum"
        #redefine a "`takeleft_(`a',14)'"
      #elseif "`keepleft_(`a',8)'" == "options="
        #redefine next "options"
        #redefine a "`takeleft_(`a',8)'"
      #endif
      #ifdef `a'
        #ifdef ``next''
          #redefine `next' "``next'',`a'"
        #else
          #redefine `next' "`a'"
        #endif
      #endif
    #endif
  #enddo

  #ifndef `loopmomentum'
    #redefine loopmomentum "k"
  #endif

  #write <`filename'> "in = `in';"
  #write <`filename'> "out = `out';"
  #write <`filename'> "loops = `loops';"
  #write <`filename'> "loop_momentum = `loopmomentum';"
  #write <`filename'> "options = `options';"
  #close <`filename'>
  #system qgraf
  #system cat `QgrafOutputFile'
  #include `QgrafOutputFile'
#endprocedure

*--#] RunQgraf : 
*--#[ SetupFormStyle :

**
* Prepares the QGRAF style file for FORM.
*
#procedure SetupFormStyle()
  #define filename "`QgrafStyleFile'"
  #create <`filename'>
  #write <`filename'> "<prologue>"
  #write <`filename'> "*"
  #write <`filename'> "* file generated by <program>"
  #write <`filename'> "*"
  #write <`filename'> "<command_loop><command_line_loop>* <command_data><end><end>*"
  #write <`filename'> "<diagram>"
  #write <`filename'> "*--#[[ d<diagram_index>:"
  #write <`filename'> "     <sign><symmetry_factor>"
  #write <`filename'> "<vertex_loop>    *vx(<ray_loop><field>(<propagator_index>),<end><back>)"
  #write <`filename'> "<end><back>"
  #write <`filename'> "*--#]] d<diagram_index>: "
  #write <`filename'> "<epilogue>"
  #write <`filename'> "*"
  #write <`filename'> "* end"
  #write <`filename'> "*"
  #write <`filename'> "<exit>"
  #close <`filename'>

  CF vx,ex,eg;
#endprocedure

*--#] SetupFormStyle : 
*--#[ SetupPhi3Model :

**
* Prepares the PHI3 model.
*
#procedure SetupPhi3Model()
  #define filename "`QgrafModelFile'"
  #create <`filename'>
  #write <`filename'> "[phi,phi,+]"
  #write <`filename'> "[phi,phi,phi]"
  #close <`filename'>

  Model PHI3;
    Particle phi,1;
    Vertex phi,phi,phi:g;
  EndModel;

  #redefine CurrentModel "PHI3"
  #redefine Bosons "phi"
#endprocedure

*--#] SetupPhi3Model : 
*--#[ SetupPhi4Model :

**
* Prepares the PHI4 model.
*
#procedure SetupPhi4Model()
  #define filename "`QgrafModelFile'"
  #create <`filename'>
  #write <`filename'> "[phi,phi,+]"
  #write <`filename'> "[phi,phi,phi,phi]"
  #close <`filename'>

  Model PHI4;
    Particle phi,1;
    Vertex phi,phi,phi,phi:g^2;
  EndModel;

  #redefine CurrentModel "PHI4"
  #redefine Bosons "phi"
#endprocedure

*--#] SetupPhi4Model : 
*--#[ SetupQcdModel :

**
* Prepares the QCD model.
*
#procedure SetupQcdModel()
  #define filename "`QgrafModelFile'"
  #create <`filename'>
  #write <`filename'> "[qua,QUA,-]"
  #write <`filename'> "[glu,glu,+]"
  #write <`filename'> "[gho,GHO,-]"
  #write <`filename'> "[QUA,qua,glu]"
  #write <`filename'> "[glu,glu,glu]"
  #write <`filename'> "[glu,glu,glu,glu]"
  #write <`filename'> "[GHO,gho,glu]"
  #close <`filename'>

  Model QCD;
    Particle qua,QUA,-2;
    Particle gho,GHO,-1;
    Particle glu,+3;
    Vertex QUA,qua,glu:g;
    Vertex GHO,gho,glu:g;
    Vertex glu,glu,glu:g;
    Vertex glu,glu,glu,glu:g^2;
  EndModel;

  #redefine CurrentModel "QCD"
  #redefine Bosons "glu"
#endprocedure

*--#] SetupQcdModel : 

* Momentum convention: all incoming
*   incoming particles: p1, p2, ...
*   outgoing particles: -q1, -q2, ...
*   internal particles: k1, k2, ...

S n1,n2,x1,x2;
CF topo,node,counter,vx,vxs(symmetric),acc,replace;
V p1,...,p`MaxLegs',q1,...,q`MaxLegs',k1,...,k`MaxPropagators',l1,...,l`MaxPropagators';
Set kk:k1,...,k`MaxPropagators';
Set ll:l1,...,l`MaxPropagators';

#OpenDictionary wildmom
	#do i = 1, `MaxPropagators'
		#add k`i': "k`i'?$k`i'"
	#enddo
#CloseDictionary

Model TEMP;
  Particle f1;
  Particle f2;
EndModel;

*--#[ MakeDiagrams :

**
* Manipulates diagrams for further manipulation.
*
* Parameters
* ----------
* numIn: positive integer
*   The number of incoming particles.
* numOut: positive integer
*   The number of outgoing particles.
*
#procedure MakeDiagrams(numIn,numOut)
* for diagrams_
  multiply replace_(topo_,dummy_);
  id node_(n1?,n2?,?a) = node_(?a);
  id node_(f1?(p1?)) = 1;
  multiply replace_(node_,node);

* for QGRAF
  #do i = 1, `numIn'
    repeat id vx(?a,f1?(1-2*`i'),?b) = vx(?a,f1(p`i'),?b);
  #enddo
  #do i = 1, `numOut'
    repeat id vx(?a,f1?(-2*`i'),?b) = vx(?a,f1(q`i'),?b);
  #enddo
  repeat id vx(?a,f1?(-1),?b) = vx(?a,f1(p1),?b);
  repeat id vx(?a,f1?(-2),?b) = vx(?a,f1(q1),?b);
  multiply counter(1);
  repeat id vx(?a,f1?(n1?),?b) * vx(?c,f2?(n1?),?d) * counter(n2?)
    = vx(?a,f1(kk[n2]),?b) * vx(?c,f2(-kk[n2]),?d) * counter(n2+1);
  repeat id vx(?a,f1?(n1?),?b,f2?(n1?),?c) * counter(n2?)
    = vx(?a,f1(kk[n2]),?b,f2(-kk[n2]),?c) * counter(n2+1);
  multiply replace_(counter,dummy_);
  multiply replace_(vx,node);

  P +sss;
  .sort:mkdiag;
#endprocedure

*--#] MakeDiagrams : 
*--#[ CanonicalizeDiagrams :

#procedure CanonicalizeDiagrams()
* Label each term uniquely.
  #$counter = 0;
  #$counter2 = 0;
  $counter = $counter + 1;
  $counter2 = $counter;
  multiply counter($counter);
  ModuleOption local, $counter;
  ModuleOption maximum, $counter2;
  Moduleoption inparallel;
  .sort:canondiag-1;
  #$counter = $counter2;

* Extract vertex structure into acc(vxs...).
  id node(?a) = node(?a) * vxs(?a);
  argument vxs;
    id f1?(p1?) = p1;
  endargument;
  multiply acc(1);
  multiply replace_(vxs,vx);
  id vx(?a) = acc(vxs(?a));
  repeat id acc(x1?) * acc(x2?) = acc(x1 * x2);
  B acc;
  .sort:canondiag-2;

  #$numtopo = 0;

  #do loop=1,1
    Keep Brackets;
*   Find a new topology.
    #$found = 0;
    if ($found == 0);
      if (match(acc(x1?$x1)));
        $found = 1;
        $numtopo = $numtopo + 1;
        $topo = $x1;
        inside $x1;
          $numv = count_(vxs,1);
        endinside;
      endif;
    endif;
    B acc;
    ModuleOption noparallel;
    .sort:canondiag-3;
    #if `$found'
*     Try to match the topology with the current term in all possible ways.
      #$found = 0;
      Keep Brackets;
      $replaced = 0;
      argument acc;
#UseDictionary wildmom($)
        if ((count(vxs,1) == `$numv') && match(`$topo'));
#CloseDictionary
          $found = 1;
          $replaced = 1;
          $t = term_;
          inside $t;
            id all, $topo * replace_(<k1,k1?>,...,<k`MaxPropagators',k`MaxPropagators'?>)
              = $topo * <replace(k1,l1)>*...*<replace(k`MaxPropagators',l`MaxPropagators')>;
            multiply replace_(vxs,dummy_);
            id replace(-k1?vector_,k2?) = replace(k1,-k2);
            chainin replace;
            multiply replace_(<l1,k1>,...,<l`MaxPropagators',k`MaxPropagators'>);
          endinside;
          multiply replace_(vxs,dummy_);
          multiply topo(`$numtopo');
          multiply $t;
        endif;
      endargument;
      if ($replaced);
        id acc(x1?) = x1;
      endif;
      ModuleOption maximum, $found;
      ModuleOption local, $t, $replaced;
      .sort:canondiag-4;
      #if `$found'
        #redefine loop "0"
        id replace(?a) = replace_(?a);
        B acc;
        .sort:canondiag-5;
      #endif
    #endif
  #enddo

* Drop duplicate terms (keep the first one).
  #do i = 1, `$counter'
    #$found = 0;
    if (match(counter(`i')));
      if ($found);
        discard;
      else;
        $found = 1;
        multiply replace_(counter,dummy_);
      endif;
    endif;
    ModuleOption local, $found;
    ModuleOption inparallel;
    .sort:remdup-`i';
  #enddo

* Boson interchange in each vertex.
  #do b = {`Bosons',}
    #ifdef `b'
      repeat id node(?a,`b'(?b),`b'(?c),?d) = node(?a,`b'(?b,?c),?d);
      multiply replace_(`b',vxs);
      multiply replace_(vxs,`b');
      repeat id node(?a,`b'(p1?,p2?,?b),?c) = node(?a,`b'(p1),`b'(p2,?b),?c);
    #endif
  #enddo
  .sort:canondiag-6;
#endprocedure

*--#] CanonicalizeDiagrams : 
*--#[ CompareDiagrams :

**
* Compares diagrams in two expressions.
*
* The common diagrams are extracted from F1 and F2, and stored in F0.
*
* Parameters
* ----------
* F1, F2: expression [in/out]
*   The expressions to be compared. Common diagrams will be removed from
*   these expressions.
* F0: expression [out]
*   The extracted common diagrams.
*
#procedure CompareDiagrams(F1,F2,F0)
  #call CanonicalizeDiagrams()

  B+ topo,node;
  .sort:compdiag-1;
  Keep Brackets;
  L `F0' = 0
  #do t = `F1';
    #$t = `t';
    #inside $t;
      dropcoefficient;
    #endinside;
    #$t1 = `F1'[`$t'];
    #$t2 = `F2'[`$t'];
    #$tt = $t1 - $t2;
    #if termsin($tt) == 0
      + (`t')
    #endif
  #enddo
  ;
  .sort
  L `F1' = `F1' - `F0';
  L `F2' = `F2' - `F0';
  P +sss;
  .sort:compdiag-3;
#endprocedure

*--#] CompareDiagrams : 
*--#[ DoComparison :

**
* Performs comparison.
*
* Example
* -------
* #call DoComparison(in=qua,out=qua,loops=1,form_options=,qgraf_options=nosnail)
*
#procedure DoComparison(?a)
  #define in ""
  #define out ""
  #define loops ""
  #define formoptions ""
  #define qgrafoptions ""

  #define next ""
  #do a = {`?a',}
    #ifdef `a'
      #if "`keepleft_(`a',3)'" == "in="
        #redefine next "in"
        #redefine a "`takeleft_(`a',3)'"
      #elseif "`keepleft_(`a',4)'" == "out="
        #redefine next "out"
        #redefine a "`takeleft_(`a',4)'"
      #elseif "`keepleft_(`a',6)'" == "loops="
        #redefine next "loops"
        #redefine a "`takeleft_(`a',6)'"
      #elseif "`keepleft_(`a',13)'" == "form_options="
        #redefine next "formoptions"
        #redefine a "`takeleft_(`a',13)'"
      #elseif "`keepleft_(`a',14)'" == "qgraf_options="
        #redefine next "qgrafoptions"
        #redefine a "`takeleft_(`a',14)'"
      #endif
      #ifdef `a'
        #ifdef `next'
          #ifdef ``next''
            #redefine `next' "``next'',`a'"
          #else
            #redefine `next' "`a'"
          #endif
        #endif
      #endif
    #endif
  #enddo

  #ifndef `formoptions'
    #redefine formoptions "0"
  #endif

  #define numIn "0"
  #define numOut "0"

  #do x = {`in',}
    #ifdef `x'
      #redefine numIn "{`numIn'+1}"
    #endif
  #enddo

  #do x = {`out',}
    #ifdef `x'
      #redefine numOut "{`numOut'+1}"
    #endif
  #enddo

  #define momenta ""

  #do i = 1, `numIn'
    #redefine momenta "`momenta',p`i'"
  #enddo

  #do i = 1, `numOut'
    #redefine momenta "`momenta',q`i'"
  #enddo

  L F1 = diagrams_(`CurrentModel',{`in'},{`out'},{`momenta'},kk,`loops',`formoptions');
  L F2 =
    #call RunQgraf(in=`in',out=`out',loops=`loops',options=`qgrafoptions')
  ;
  #call MakeDiagrams(`numIn',`numOut')
  #call CompareDiagrams(F1,F2,F0)
#endprocedure

*--#] DoComparison : 

#call SetupFormStyle()

*--#] qgraf_include : 
*--#[ qgraf_phi4_phiphiphiphi1 :
#include - qgraf.frm # qgraf_include
#call SetupPhi4Model()
#call DoComparison(in=phi,phi,out=phi,phi,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_phi4_phiphiphiphi1 : 
*--#[ qgraf_qcd_quaqua1 :
#include - qgraf.frm # qgraf_include
#call SetupQcdModel()
#call DoComparison(in=qua,out=qua,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_qcd_quaqua1 : 
*--#[ qgraf_qcd_gluglu1 :
#include - qgraf.frm # qgraf_include
#call SetupQcdModel()
#call DoComparison(in=glu,out=glu,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_qcd_gluglu1 : 
*--#[ qgraf_qcd_ghogho1 :
#include - qgraf.frm # qgraf_include
#call SetupQcdModel()
#call DoComparison(in=gho,out=gho,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_qcd_ghogho1 : 
*--#[ qgraf_qcd_quaquaglu1 :
#include - qgraf.frm # qgraf_include
#call SetupQcdModel()
#call DoComparison(in=qua,out=qua,glu,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_qcd_quaquaglu1 : 
*--#[ qgraf_qcd_glugluglu1 :
#include - qgraf.frm # qgraf_include
#call SetupQcdModel()
#call DoComparison(in=glu,out=glu,glu,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_qcd_glugluglu1 : 
*--#[ qgraf_qcd_gluglugluglu1 :
#include - qgraf.frm # qgraf_include
#call SetupQcdModel()
#call DoComparison(in=glu,glu,out=glu,glu,loops=1,form_options=,qgraf_options=nosnail)
.end
assert succeeded?
assert nterms("F1") == 0;
assert nterms("F2") == 0;
*--#] qgraf_qcd_gluglugluglu1 : 
