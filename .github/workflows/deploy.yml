name: Deploy

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  # Generate the tarball distribution, e.g., "form-v4.2.1.tar.gz" for v4.2.1.
  # The tarball will be tested in the following "build-bin" job.
  build-src:
    name: Build tarball distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ensures a reachable tag

      - name: Determine distname
        run: |
          echo "distname=form-$(./scripts/git-version-gen.sh -r | sed '2q;d' | sed 's/^v//')" >> $GITHUB_ENV

      - name: Build tarball distribution
        run: |
          autoreconf -i
          ./configure --disable-dependency-tracking --disable-scalar --disable-threaded --disable-native --without-gmp --without-zlib
          make distdir=$distname dist-gzip

      - name: Print tarball information
        run: |
          ls -l $distname.tar.gz
          file $distname.tar.gz
          tar -tf $distname.tar.gz

      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: src
          path: '*.tar.gz'
          if-no-files-found: error

  # Build executables from the tarball distribution (w/o the Git repository).
  # The executables must not be too optimized for the build machine and must be
  # statically linked in such a way that they are suitable for binary distributions.
  build-bin:
    name: Build ${{ matrix.bin }} on ${{ matrix.os }}
    needs: build-src
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }} {0}
    strategy:
      fail-fast: false
      matrix:
        include:
          # To maximize compatibility, we build executables on the oldest
          # platforms available.
          # - {os: ubuntu-20.04, shell: bash, bin: form}
          # - {os: ubuntu-20.04, shell: bash, bin: tform}
          # - {os: macos-13, shell: bash, bin: form}
          # - {os: macos-13, shell: bash, bin: tform}
          # The macos-14 runner image is based on the arm64 architecture.
          # - {os: macos-14, shell: bash, bin: form}
          # - {os: macos-14, shell: bash, bin: tform}
          # NOTE: Windows native executables have too many problems.
          # We include them in artifacts but not in releases.
          # Unfortunately, "allow-failure" is not available on GitHub Actions
          # (https://github.com/actions/toolkit/issues/399).
          # We have to use "continue-on-error", instead.
          - {os: windows-2019, shell: msys2, bin: form}
          - {os: windows-2019, shell: msys2, bin: tform}
    steps:
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libmpfr-dev
          version: 1.0

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gmp
            mingw-w64-x86_64-mpfr
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-ruby

      - name: Download tarball
        uses: actions/download-artifact@v4
        with:
          name: src

      - name: Uncompress tarball
        run: |
          tar -xf *.tar.gz --strip-components 1
          rm *.tar.gz

      - name: Configure
        run: |
          opts='--disable-dependency-tracking --disable-scalar --disable-threaded --disable-native --enable-static-link --with-gmp --with-zlib'
          case ${{ matrix.bin }} in
            form)  opts="$opts --enable-scalar";;
            tform) opts="$opts --enable-threaded";;
          esac
          # --static fails on macOS but we want to statically link
          # the brewed gmp. The linker supports neither -Wl,-static nor
          # -l:libgmp.a to make partial static links possible.
          # As a workaround, we make a library directory with libgmp.a
          # but without libgmp.dylib so that the linker has to link libgmp.a.
          # Note that the Homebrew installation path for Apple Silicon (arm64)
          # differs from the one on macOS Intel (x86-64).
          mkdir static-lib
          if [ "$RUNNER_OS" == "macOS" ]; then
            if [ "$RUNNER_ARCH" == "ARM64" ]; then
              ln -s /opt/homebrew/opt/gmp/lib/libgmp.a static-lib/libgmp.a
              ln -s /opt/homebrew/opt/mpfr/lib/libmpfr.a static-lib/libmpfr.a
              # The GMP and MPFR include directories, not located in the usual places,
              # must be explicitly appended to the include paths.
              export CPATH="/opt/homebrew/opt/gmp/include:/opt/homebrew/opt/mpfr/include:${CPATH:-}"
            else
              ln -s /usr/local/opt/gmp/lib/libgmp.a static-lib/libgmp.a
              ln -s /usr/local/opt/mpfr/lib/libmpfr.a static-lib/libmpfr.a
            fi
            export LIBRARY_PATH="$(pwd)/static-lib:${LIBRARY_PATH:-}"
            opts="$opts --disable-static-link"
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            opts="$opts --with-api=windows"
          fi
          ./configure $opts

      - name: Build
        id: build
        #continue-on-error: ${{ runner.os == 'Windows' }}
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            if [ "$RUNNER_ARCH" == "ARM64" ]; then
              export CPATH="/opt/homebrew/opt/gmp/include:/opt/homebrew/opt/mpfr/include:${CPATH:-}"
            fi
            export LIBRARY_PATH="$(pwd)/static-lib:${LIBRARY_PATH:-}"
          fi
          make -j 4

      # NOTE: Currently, many tests on Windows miserably fail.
      - name: Test
        if: steps.build.outcome == 'success' && steps.build.conclusion == 'success'
        #continue-on-error: ${{ runner.os == 'Windows' }}
        run: make check

      - name: Print executable information
        id: check-portability
        if: steps.build.outcome == 'success' && steps.build.conclusion == 'success'
        #continue-on-error: ${{ runner.os == 'Windows' }}
        run: |
          binname=${{ matrix.bin }}
          if [ "$RUNNER_OS" == "Windows" ]; then
            binname=$binname.exe
          fi
          ls -l sources/$binname
          file sources/$binname
          if [ "$RUNNER_OS" == "macOS" ]; then
            otool -L sources/$binname
            # Check if brewed libraries are statically linked.
            if otool -L sources/$binname | grep -q '/usr/local/opt'; then
              echo 'Error: failed to statically link brewed libraries' >&2
              exit 1
            fi
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            ldd sources/$binname
            # Check if MSYS2 DLLs are not linked.
            if ldd sources/$binname | grep -q 'msys'; then
              echo 'Error: failed to avoid to link with MSYS2 DLLs' >&2
              exit 1
            fi
          fi

      - name: Upload binary as artifact
        if: steps.check-portability.outcome == 'success' && steps.check-portability.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin }}-${{ matrix.os }}
          path: |
            sources/${{ matrix.bin }}
            sources/${{ matrix.bin }}.exe
          if-no-files-found: error
